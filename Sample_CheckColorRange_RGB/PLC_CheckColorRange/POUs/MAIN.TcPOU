<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="MAIN" Id="{fb176b2f-58d3-4515-9338-b35d2fd9b98b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	hr					:	HRESULT;
	
	fbCamera			:	FB_VN_SimpleCameraControl;
	eState				:	ETcVnCameraState;
	
	// Images
	ipImageIn			:	ITcVnImage;
	ipImageInDisp		:	ITcVnDisplayableImage;
	
	ipImageWork			:	ITcVnImage;
	ipImageWorkCol		:	ARRAY [0..2] OF ITcVnImage;
	ipImageWorkColDisp	:	ARRAY [0..2] OF ITcVnDisplayableImage;
	
	ipImageRes			:	ITcVnImage;
	ipImageResDisp		:	ITcVnDisplayableImage;

	// Colors
	iColor				:	INT;
	aColorTxt			:	ARRAY[0..2] OF STRING 				:= [	'RED',				'GREEN', 			'BLUE'			];
	aColor				:	ARRAY[0..2] OF TcVnVector4_LREAL	:= [	[150, 0, 0],		[0, 255, 0],		[0, 0, 255]		];
	aColorRefLow		:	ARRAY[0..2] OF TcVnVector4_LREAL	:= [	[150, 50, 20],		[35, 90, 60], 		[20, 40, 130]	];
	aColorRefUp			:	ARRAY[0..2] OF TcVnVector4_LREAL 	:= [	[255, 120, 100],	[100, 200, 140],	[60, 160, 255]	];
	
	// Contours
	ipContourList		:	ITcVnContainer;
	ipIterator			:	ITcVnForwardIterator;
	ipContour			:	ITcVnContainer;
	fArea				:	LREAL;
	aCenter				:	TcVnPoint2_LREAL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//	Disclaimer
  	
//	THIS publication contains statements about the suitability OF our products FOR certain 
//	areas OF application. These statements are based on typical features OF our products. 
//	The examples shown in THIS publication are FOR demonstration purposes only. The 
//	information provided herein should NOT be regarded as specific operation characteristics. 
//	It is incumbent on the customer TO check AND decide whether a product is suitable FOR use 
//	in a particular application. We DO NOT give ANY warranty that the source code which is 
//	made available with this publication is complete or accurate. 
  	
//	THE SAMPLE CODE CONTAINED IN THIS PUBLICATION IS PROVIDED “AS IS” WITHOUT WARRANTY OF ANY 
//	KIND, EITHER EXPRESSED, IMPLIED OR STATUTORY, INCLUDING WITHOUT LIMITATION, ANY WARRANTY 
//	WITH RESPECT TO NON-INFRINGEMENT, FREEDOM FROM PROPRIETARY RIGHTS OF THIRD PARTIES OR 
//	FITNESS FOR ANY PARTICULAR PURPOSE. 
  	
//	THIS publication may be changed FROM TIME TO TIME without prior notice. No liability 
//	is assumed FOR errors AND/OR omissions. Our products are described in detail in our 
//	data sheets AND documentations. Product-specific warnings AND cautions must be observed. 
//	FOR the latest version OF our data sheets AND documentations visit our website 
//	(www.beckhoff.de). 
  	
//	© Beckhoff Automation GmbH & Co. KG, March 2020
  	
//	The reproduction, distribution AND utilization OF THIS document as well as the 
//	communication OF its contents TO others without express authorization is prohibited. 
//	Offenders will be held liable FOR the payment OF damages. All rights reserved in the 
//	event of the grant of a patent, utility model or design.

//	-----------------------------------------------------------------------------------------

//	SAMPLE - CHECK COLOR RANGE
//	============================
  	
//	Steps To Do:
//	-------------
//	1. Add the images to the FileSource1


eState := fbCamera.GetState();

CASE eState OF

TCVN_CS_INITIAL, TCVN_CS_OPENING, TCVN_CS_OPENED, TCVN_CS_STARTACQUISITION:
	hr := fbCamera.StartAcquisition();

TCVN_CS_ACQUIRING:
	hr := fbCamera.GetCurrentImage(ipImageIn);	
	
	IF SUCCEEDED(hr) AND ipImageIn <> 0 THEN
		
		// Display Input Image
		hr := F_VN_CopyIntoDisplayableImage(ipImageIn, ipImageInDisp, hr);
		
		// Attention: With other images another color space transformation could be necessary
		hr := F_VN_ConvertColorSpace(ipImageIn, ipImageWork, TCVN_CST_Bayer_RG_TO_RGB, hr);
		hr := F_VN_CopyImage(ipImageWork, ipImageRes, hr);
		
		FOR iColor := 0 TO 2 DO
			
			// Apply a "Color-Threshold" on the image
			hr := F_VN_CheckColorRange(ipImageWork, ipImageWorkCol[iColor], aColorRefLow[iColor],  aColorRefUp[iColor], hr);
			
			// Display effect of the CheckColorRanage-Function 
			hr := F_VN_CopyIntoDisplayableImage(ipImageWorkCol[iColor], ipImageWorkColDisp[iColor], hr);
			
			// Find all objects / contours in the black and white image
			hr := F_VN_FindContours(ipImageWorkCol[iColor], ipContourList, hr);	
			hr := F_VN_GetForwardIterator(ipContourList, ipIterator, hr);

			// Filter the objects by size and draw the contours 
			WHILE SUCCEEDED(hr) AND_THEN ipIterator.CheckIfEnd() <> S_OK DO

				hr := F_VN_GetContainer(ipIterator, ipContour, hr);
				hr := F_VN_IncrementIterator(ipIterator, hr);
				
				// Filter contours by size
				hr := F_VN_ContourArea(ipContour, fArea, hr);
		
				IF fArea > 5000 THEN					
					// Draw Results into an Image				
					hr := F_VN_DrawContours(ipContour, -1, ipImageRes, aColor[iColor], 3, hr);
					hr := F_VN_ContourCenterOfMass(ipContour, aCenter, hr);
					hr := F_VN_PutText(aColorTxt[iColor], ipImageRes, LREAL_TO_UDINT(aCenter[0])-30, LREAL_TO_UDINT(aCenter[1])+10, TCVN_FT_HERSHEY_PLAIN, 2, aColor[iColor], hr);
				END_IF
				
			END_WHILE				
			
		END_FOR
		
		// Display Result Image
		hr := F_VN_TransformIntoDisplayableImage(ipImageRes, ipImageResDisp, hr);
	END_IF
	
TCVN_CS_ERROR:
	hr := fbCamera.Reset();	

END_CASE]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="180" Count="27" />
      <LineId Id="178" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="41" Count="10" />
      <LineId Id="105" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="100" Count="0" />
      <LineId Id="55" Count="6" />
      <LineId Id="142" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="63" Count="3" />
      <LineId Id="68" Count="2" />
      <LineId Id="144" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="104" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="77" Count="7" />
      <LineId Id="101" Count="0" />
      <LineId Id="85" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>